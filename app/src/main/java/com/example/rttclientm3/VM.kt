package com.example.rttclientm3

import android.net.nsd.NsdServiceInfo
import androidx.lifecycle.ViewModel
import androidx.lifecycle.viewModelScope
import com.example.rttclientm3.screen.consoleAdd
import com.example.rttclientm3.screen.manual_recomposeLazy
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.channels.Channel
import kotlinx.coroutines.launch
import kotlinx.coroutines.withContext
import java.net.DatagramPacket
import java.net.DatagramSocket

class VM : ViewModel() {





    // Declare NsdHelper object for service discovery
    private val nsdHelper: NsdHelper? = object : NsdHelper(contex!!) {
        override fun onNsdServiceResolved(service: NsdServiceInfo) {
            // A new network service is available
            // Put your custom logic here!!!
        }

        override fun onNsdServiceLost(service: NsdServiceInfo) {
            // A network service is no longer available
            // Put your custom logic here!!!
        }
    }

    // Block that is run when the view model is created
    init {

        // Initialize DNS-SD service discovery
        nsdHelper?.initializeNsd()

        // Start looking for available audio channels in the network
        nsdHelper?.discoverServices()

    }


    //–ö–∞–Ω–∞–ª –ø–µ—Ä–µ–¥–∞—á–∏
    private val channel = Channel<String>(1000000)

    fun launchUDPRecive() {
        viewModelScope.launch {
            UDPRoutine()
        }
    }

    fun launchUIChanelRecive() {
        viewModelScope.launch {
            reciveUI()
        }
    }

    //–°–æ–∑–¥–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞ pairTextAndColor –∏–∑ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
    private fun text_to_paitList(txt: String): List<pairTextAndColor> {
        val pair: MutableList<pairTextAndColor> = arrayListOf()
        //–∑–∞–º–µ–Ω–∞ [ –Ω–∞ \u001C —ç—Ç–æ –∏ –±—É–¥–µ—Ç –Ω–æ–≤—ã–π —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
        val str = txt.replace("\u001B", "\u001C\u001B")
        val list = str.split("\u001C") //–†–∞–∑–¥–µ–ª–∏—Ç—å –ø–æ 1C —á—Ç–æ–±—ã —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å [
        for (str1 in list) {
            if (str1 == "") {
                continue
            } else {
                //println("!text_to_paitList! split –ø–æ ESC >>$str1")
                val p = stringcalculate(str1)
                pair += p//–°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–∞—Ä –¥–ª—è –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
            }
        }
        return pair
    }

    private suspend fun reciveUI() = withContext(Dispatchers.Main)
    {
        val bigStr: StringBuilder =
            StringBuilder()//–ë–æ–ª—å—à–∞—è —Å—Ç—Ä–æ–∫–∞ –≤ –∫–æ—Ç–æ—Ä—É—é –∏ —Å–∫–ª–∞–¥–∏—Ä—É—é—Ç—Å—è –¥–∞–Ω–Ω—ã–µ —Å –∫–∞–Ω–∞–ª–∞

        while (true) {

            val string =
                channel.receive() //–ü–æ–ª—É—á–∏—Ç—å —Å—Ç—Ä–æ–∫—É —Å –∫–∞–Ω–∞–ª–∞, —Å–º–æ–∂–µ—Ç —Å–æ–¥–µ–ª–∂–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å—Ç—Ä–æ–∫

            bigStr.append(string) //–ó–∞—Ö–µ—Ä—è—á–∏–≤–∞–µ–º –≤ –±–æ–ª—å—à—É—é —Å—Ç—Ä–æ–∫—É

            val stringCorrection = string.replace('\n', '‚ñí')
            //println("!reciveUI!>>–ò–∑ –∫–∞–Ω–∞–ª–∞>>$string")
            println("!reciveUI!>>–ò–∑ –∫–∞–Ω–∞–ª–∞ –ö–æ—Ä—Ä–µ–∫—Ü–∏—è>>$stringCorrection")

            //println("!reciveUI!>>BigStr>>$bigStr")
            //println("!reciveUI! –ï—Å—Ç—å \\n = ${bigStr.indexOf('\n')} –î–ª–∏–Ω–Ω–∞ ${bigStr.length}")

            val strList = mutableListOf<String>()

            //MARK: –ë—É–¥–µ–º —Å–∞–º–∏ –¥–µ–ª–∏—Ç—å –Ω–∞ —Å—Ç—Ä–æ–∫–∏
            do {
                //–ò–Ω–¥–µ–∫—Å \n
                val indexN = bigStr.indexOf('\n')

                if (indexN != -1) {
                    //–û–±–ª–∞—Å—Ç—å –ø–æ –ª—é–±–æ–º—É –∏–º–µ—Ç –∫–æ–Ω–µ—Ü —Å—Ç—Ä–æ–∫–∏
                    //MARK: –ß–µ—Ç–∞ –µ—Å—Ç—å, –∫–æ–ø–∏—Ä—É–µ–º –≤ –ø–æ–¥—Å—Ç—Ä–æ–∫—É
                    val stringDoN = bigStr.substring(0, indexN)
                    bigStr.delete(0, bigStr.indexOf('\n') + 1)
                    strList.add(stringDoN)

                    //MARK: –¢—É—Ç –¥–ª—è –¥–æ–ø–æ–ª–Ω–µ–Ω–∏—è –ø—Ä–æ—à–ª–æ–π —Å—Ç—Ä–æ–∫–∏
                    //–ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª–Ω—É—é –∑–∞–ø–∏—Å—å –ø–æ—Å–ª–µ–Ω–Ω–µ–π —Å—Ç—Ä–æ–∫–∏
                    colorline_and_text.last().text += stringDoN

                    if (isCheckedUseLiteralEnter.value)
                      colorline_and_text.last().text += '‚§µ'

                    //println("!reciveUI! –°—Ç–∞—Ä–∞—è —Å—Ç—Ä–æ–∫–∞ >>${colorline_and_text.last().text}")

                    //–°–æ–∑–¥–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∏–∑ —Å—Ç—Ä–æ–∫–∏ –æ—Å–Ω–æ–≤–µ —Ç–µ–∫—Å—Ç–∞
                    val pair = text_to_paitList(colorline_and_text.last().text)
                    colorline_and_text.last().pairList = pair

                    manual_recomposeLazy.value =
                        manual_recomposeLazy.value + 1 //–î–ª—è —Ä—É—á–Ω–æ–π —Ä–µ–∫–æ–º–ø–æ–∑–∏—Ü–∏–∏ —Å–ø–∏—Å–∫–∞

                    consoleAdd("") //–ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞

                } else {

                    //MARK: –¢—É—Ç –¥–ª—è –¥–æ–ø–æ–ª–Ω–µ–Ω–∏—è –ø—Ä–æ—à–ª–æ–π —Å—Ç—Ä–æ–∫–∏
                    //–ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª–Ω—É—é –∑–∞–ø–∏—Å—å –ø–æ—Å–ª–µ–Ω–Ω–µ–π —Å—Ç—Ä–æ–∫–∏
                    colorline_and_text.last().text += bigStr
                    bigStr.clear() //–û–Ω –æ—Ç–∂–∏–ª —Å–≤–æ–µ)

                    //println("!reciveUI! –°—Ç–∞—Ä–∞—è —Å—Ç—Ä–æ–∫–∞ >>${colorline_and_text.last().text}")

                    //–°–æ–∑–¥–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∏–∑ —Å—Ç—Ä–æ–∫–∏ –æ—Å–Ω–æ–≤–µ —Ç–µ–∫—Å—Ç–∞
                    val pair = text_to_paitList(colorline_and_text.last().text)
                    colorline_and_text.last().pairList = pair

                    manual_recomposeLazy.value =
                        manual_recomposeLazy.value + 1 //–î–ª—è —Ä—É—á–Ω–æ–π —Ä–µ–∫–æ–º–ø–æ–∑–∏—Ü–∏–∏ —Å–ø–∏—Å–∫–∞

                    break
                }
            } while (true)


        }
    }

    private suspend fun UDPRoutine() = withContext(Dispatchers.IO) {
        println("–ó–∞–ø—É—Å–∫ UDPRoutine ")
        val buffer = ByteArray(1024 * 128)
        var socket: DatagramSocket? = null
        socket = DatagramSocket(8888)
        socket.broadcast = true
        val packet = DatagramPacket(buffer, buffer.size)
        socket.receiveBufferSize = 1024 * 512
        while (true) {
            socket.receive(packet)
            val buffer1: ByteArray = packet.data.copyOfRange(0, packet.length)
            val string = String(buffer1)
            //println("!UDPRoutine! packet RAW=[$string")
            channel.send(string)
        }
    }
}